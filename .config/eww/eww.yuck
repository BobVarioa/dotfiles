(defwidget bar []
  (box :orientation "h" :spacing 0
    (right)
    (clock)
    (sidestuff)
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "üîä"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "Ô°ö"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "üíæ"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    {music != "" ? "üéµ${music}" : ""}
  )
)


(deflisten runningApps :inital "[]"
  `xprop -spy -root _NET_CLIENT_LIST | xargs -l $HOME/.config/eww/scripts/getapplications.py`
)

(defwidget right []
  (box
    :halign "start"
    :orientation "h"
    :class "right"
    :spacing 0
    (box :class "applications"
        :space-evenly true
        :spacing 5
      (button :class "powerbutton" :onclick "shutdown now"
        (label :text "‚èª" )
      )
      (for entry in runningApps
        (eventbox
          :onhover `${EWW_CMD} open applicationTooltip && ${EWW_CMD} update tooltipData='${entry}'`

          (button
            :onclick "wmctrl -ia ${entry.wid}" :class "app"
            (image :path {entry.icon} :image-width 18 :image-height 18 )
          )
        )
      )
    )

  )
)

(defvar tooltipData "{}")

(defwindow applicationTooltip
	:geometry (geometry
        :x "0px"
        :y "25px"
        :width "150px"
        :height "100px")
    (box
      :class "leftTooltip"
      (eventbox
        :onhoverlost "${EWW_CMD} close applicationTooltip"
        (box :orientation "v" :class "leftTooltip-title" :valign "start"
          (centerbox :orientation "h" :spacing 2 :halign "fill" :hexpand true
            (image :path {tooltipData.icon} :image-width 18 :image-height 18 :halign "start")
            (label :text {tooltipData.name} :xalign 0 :justify "center"
            (button
              (label :text "x" :halign "end")
            )
          )
          (label :text {tooltipData.title} :limit-width 35 :halign "start")
        )
      )
    )
)

(defpoll clock_time :interval "5m" "date +\%I")
(defpoll clock_minute :interval "5s" "date +\%M")
(defpoll clock_date :interval "2h" "date '+%d/%m/%y'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

(defwidget clock []
  (button :class "clock_date_class"
    :onclick "${EWW_CMD} open --toggle calendar"
    (overlay :class "clock" :hexpand "true"
        (label :text "${clock_time}:${clock_minute}" :class "clock_text" :yalign 0)
        (label :text "${clock_date}" :class "clock_text2" :yalign 1 )
    )
  )
)

(defwindow calendar
	:geometry (geometry
        :x "0px"
        :y "26px"
        :anchor "top center"
        :width "270px"
        :height "60px")
    (box :class "cal" :orientation "v"
      (box :class "cal-in"
        (calendar :class "cal"
          :day calendar_day
          :year calendar_year
        )
      )
    )
)



(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "22px"
                      :anchor "top center")
   :reserve (struts :side "top" :distance "24px")
  (bar))
)
